{"version":3,"sources":["server/note.ts"],"names":[],"mappings":"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","file":"note.js","sourcesContent":["import { ServerRequest, ServerResponse, ServerError, StatusCode, validate } from \"phaethon\";\nimport { ObjectID } from \"mongodb\";\nimport { Session } from \"./index\";\nimport { getUserOrError } from \"./user\";\nimport { Note } from \"./note\";\nimport { getTitle } from \"../shared/note\";\nimport { MenuResult, ItemResult } from \"../shared/api\";\nimport * as database from \"./database\";\n\nexport interface Note {\n\t_id: ObjectID;\n\tuserId: ObjectID;\n\tcontent: string;\n}\n\nexport async function list(request: ServerRequest, session: Session): Promise<MenuResult> {\n\tconst user = await getUserOrError(session);\n\tconst results = await database.find(\n\t\tdatabase.notes, { userId: user._id });\n\tconst items = results.map(note => ({\n\t\tid: note._id.toHexString(),\n\t\ttitle: getTitle(note.content)\n\t}));\n\treturn { items };\n}\nexport async function find(request: ServerRequest, session: Session): Promise<ItemResult> {\n\tconst user = await getUserOrError(session);\n\tconst id = validate.expect(\n\t\trequest.query[\"id\"], validate.isString);\n\tconst notes = await database.find(database.notes,\n\t\t{ _id: new ObjectID(id), userId: user._id });\n\tif (notes.length === 0) {\n\t\tthrow new ServerError(StatusCode.ClientErrorNotFound);\n\t}\n\tconst note = notes[0];\n\treturn {\n\t\tid: note._id.toHexString(),\n\t\tcontent: note.content\n\t};\n}\n\nexport async function insert(request: ServerRequest, session: Session): Promise<ItemResult> {\n\tconst user = await getUserOrError(session);\n\tconst content = validate.expect(\n\t\trequest.query[\"content\"], validate.isString);\n\tconst note: Note = {\n\t\t_id: undefined,\n\t\tuserId: user._id,\n\t\tcontent\n\t};\n\tawait database.insert(database.notes, note);\n\treturn {\n\t\tid: note._id.toHexString(),\n\t\tcontent: note.content\n\t};\n}\nexport async function update(request: ServerRequest, session: Session): Promise<ItemResult> {\n\tconst user = await getUserOrError(session);\n\tconst id = validate.expect(\n\t\trequest.query[\"id\"], validate.isString);\n\tconst content = validate.expect(\n\t\trequest.query[\"content\"], validate.isString);\n\tconst note: Note = {\n\t\t_id: new ObjectID(id),\n\t\tuserId: user._id,\n\t\tcontent\n\t};\n\tawait database.update(database.notes,\n\t\t{ _id: new ObjectID(id), userId: user._id }, note);\n\treturn {\n\t\tid: note._id.toHexString(),\n\t\tcontent: note.content\n\t};\n}\nexport async function remove(request: ServerRequest, session: Session) {\n\tconst user = await getUserOrError(session);\n\tconst id = validate.expect(\n\t\trequest.query[\"id\"], validate.isString);\n\tawait database.remove(database.notes,\n\t\t{ _id: new ObjectID(id), userId: user._id });\n\treturn {};\n}\n"]}