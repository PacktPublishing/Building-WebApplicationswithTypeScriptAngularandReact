{"version":3,"sources":["server/database.ts"],"names":[],"mappings":"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","file":"database.js","sourcesContent":["import { MongoClient, Db, Collection } from \"mongodb\";\nimport { User } from \"./user\";\nimport { Note } from \"./note\";\n\nexport interface Table<T> extends Collection {\n\t__tableBrand: T;\n}\n\nconst databaseUrl = \"mongodb://localhost/notes\";\nconst database = new Promise<Db>(resolve => {\n\tMongoClient.connect(databaseUrl, (error, db) => {\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\t\tresolve(db);\n\t})\n});\nasync function getCollection<U>(name: string) {\n\tconst db = await database;\n\treturn <Table<U>> db.collection(name);\n}\nexport const users = getCollection<User>(\"users\");\nexport const notes = getCollection<Note>(\"notes\");\n\nexport async function insert<U>(table: Promise<Table<U>>, item: U) {\n\tconst collection = await table;\n\treturn new Promise<void>((resolve, reject) => {\n\t\tcollection.insertOne(item, (error) => {\n\t\t\tif (error) {\n\t\t\t\treject(error);\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}\nexport async function update<U extends V, V>(table: Promise<Table<U>>, query: V, newItem: U) {\n\tconst collection = await table;\n\treturn new Promise<void>((resolve, reject) => {\n\t\tcollection.updateOne(query, newItem, (error) => {\n\t\t\tif (error) {\n\t\t\t\treject(error);\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}\nexport async function remove<U extends V, V>(table: Promise<Table<U>>, query: V) {\n\tconst collection = await table;\n\treturn new Promise<void>((resolve, reject) => {\n\t\tcollection.deleteOne(query, (error) => {\n\t\t\tif (error) {\n\t\t\t\treject(error);\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}\nexport async function find<U extends V, V>(table: Promise<Table<U>>, query: V) {\n\tconst collection = await table; \n\treturn new Promise<U[]>((resolve, reject) => {\n\t\tcollection.find(query, (error, cursor) => {\n\t\t\tif (error) {\n\t\t\t\treject(error);\n\t\t\t} else {\n\t\t\t\tcursor.toArray((error, results) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(results);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n}\n"]}