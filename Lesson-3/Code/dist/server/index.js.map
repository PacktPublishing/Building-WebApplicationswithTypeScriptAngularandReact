{"version":3,"sources":["server/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBAyCA;;AAzCA,qCAAwG;AAExG,+BAA6C;AAC7C,6BAA+B;AAM/B,IAAM,MAAM,GAAG,IAAI,iBAAM,EAAE,CAAC;AAC5B,IAAM,YAAY,GAAG,IAAI,uBAAY,CAAU,YAAY,EAAE,cAAM,OAAA,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,EAAvB,CAAuB,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,IAAI,CAAC,CAAC;AAChH,MAAM,CAAC,QAAQ,GAAG,YAAY,CAAC,YAAY,CAAC,UAAO,OAAO,EAAE,OAAO;;;;oBACjD,qBAAM,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,EAAA;;gBAArD,QAAQ,GAAG,SAA0C;gBAC3D,EAAE,CAAC,CAAC,QAAQ,YAAY,yBAAc,CAAC,CAAC,CAAC;oBACxC,MAAM,gBAAC,QAAQ,EAAC;gBACjB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACD,cAAc,GAAG,IAAI,yBAAc,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACpE,MAAM,gBAAC,cAAc,EAAC;gBACvB,CAAC;;;;KACD,CAAC,CAAC;AACH,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAExB,uBAA6B,OAAsB,EAAE,OAAgB;;;;YAC9D,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YAExC,EAAE,CAAC,CAAC,IAAI,KAAK,YAAY,CAAC;gBACzB,MAAM,gBAAC,YAAK,CAAC,OAAO,EAAE,OAAO,CAAC,EAAC;YAChC,EAAE,CAAC,CAAC,IAAI,KAAK,aAAa,CAAC;gBAC1B,MAAM,gBAAC,aAAM,CAAC,OAAO,EAAE,OAAO,CAAC,EAAC;YACjC,EAAE,CAAC,CAAC,IAAI,KAAK,gBAAgB,CAAC;gBAC7B,MAAM,gBAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,EAAC;YACpC,EAAE,CAAC,CAAC,IAAI,KAAK,kBAAkB,CAAC;gBAC/B,MAAM,gBAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,EAAC;YACtC,EAAE,CAAC,CAAC,IAAI,KAAK,kBAAkB,CAAC;gBAC/B,MAAM,gBAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,EAAC;YACtC,EAAE,CAAC,CAAC,IAAI,KAAK,kBAAkB,CAAC;gBAC/B,MAAM,gBAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,EAAC;YACtC,EAAE,CAAC,CAAC,IAAI,KAAK,gBAAgB,CAAC;gBAC7B,MAAM,gBAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,EAAC;YACpC,MAAM,IAAI,sBAAW,CAAC,qBAAU,CAAC,mBAAmB,CAAC,CAAC;;;CACtD","file":"index.js","sourcesContent":["import { Server, ServerRequest, ServerResponse, ServerError, StatusCode, SessionStore } from \"phaethon\";\nimport { ObjectID } from \"mongodb\";\nimport { User, login, logout } from \"./user\";\nimport * as note from \"./note\";\n\nexport interface Session {\n\tuserId: ObjectID;\n}\n\nconst server = new Server();\nconst sessionStore = new SessionStore<Session>(\"session-id\", () => ({ userId: undefined }), 60 * 60 * 24, 1024);\nserver.listener = sessionStore.wrapListener(async (request, session) => {\n\tconst response = await handleRequest(request, session.data);\n\tif (response instanceof ServerResponse) {\n\t\treturn response;\n\t} else {\n\t\tconst serverResponse = new ServerResponse(JSON.stringify(response));\n\t\treturn serverResponse;\n\t}\n});\nserver.listenHttp(8800);\n\nasync function handleRequest(request: ServerRequest, session: Session): Promise<ServerResponse | Object> {\n\tconst path = request.path.toLowerCase();\n\n\tif (path === \"/api/login\")\n\t\treturn login(request, session);\n\tif (path === \"/api/logout\")\n\t\treturn logout(request, session);\n\tif (path === \"/api/note/list\")\n\t\treturn note.list(request, session);\n\tif (path === \"/api/note/insert\")\n\t\treturn note.insert(request, session);\n\tif (path === \"/api/note/update\")\n\t\treturn note.update(request, session);\n\tif (path === \"/api/note/remove\")\n\t\treturn note.remove(request, session);\n\tif (path === \"/api/note/find\")\n\t\treturn note.find(request, session);\n\tthrow new ServerError(StatusCode.ClientErrorNotFound);\n}\n"]}